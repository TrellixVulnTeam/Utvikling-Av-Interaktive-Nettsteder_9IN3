{"ast":null,"code":"var _jsxFileName = \"/Users/joakimvu/Documents/GitHub/Utvikling-Av-Interaktive-Nettsteder/Oppgave 8 React Sanity/react/src/components/Actors.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { getActors, getMovieActor } from '../lib/movieService';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Actors() {\n  _s();\n\n  const [actors, setActors] = useState();\n  useEffect(() => {\n    // Funksjon for å hente actors data\n    const getActorsData = async () => {\n      const actors = await getActors(); // console.log(JSON.stringify(actors))\n      // Sorterer listen med skuespiller etter tittel på filemene\n\n      setActors(actors.sort((a, b) => a.title > b.title ? 1 : -1));\n    }; // Kaller på getActorsData funksjonen og tar med en .catch\n    // for å fange opp eventuelle feil\n\n\n    getActorsData().catch(error => console.log(error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: actors === null || actors === void 0 ? void 0 : actors.map((actor, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: actor.fullname\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: `/actors/${actor.slug}`,\n        children: \"Read More\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n}\n\n_s(Actors, \"IEbKVh6xt4cs5chQUVoPuZ2JxXs=\");\n\n_c = Actors;\nexport default Actors;\n\nvar _c;\n\n$RefreshReg$(_c, \"Actors\");","map":{"version":3,"sources":["/Users/joakimvu/Documents/GitHub/Utvikling-Av-Interaktive-Nettsteder/Oppgave 8 React Sanity/react/src/components/Actors.js"],"names":["useEffect","useState","getActors","getMovieActor","Link","Actors","actors","setActors","getActorsData","sort","a","b","title","catch","error","console","log","map","actor","index","fullname","slug"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,qBAAzC;AACA,SAASC,IAAT,QAAqB,kBAArB;;;;AAEA,SAASC,MAAT,GAAkB;AAAA;;AAChB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,EAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMQ,aAAa,GAAG,YAAY;AAChC,YAAMF,MAAM,GAAG,MAAMJ,SAAS,EAA9B,CADgC,CAEhC;AACA;;AACAK,MAAAA,SAAS,CAACD,MAAM,CAACG,IAAP,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACE,KAAF,GAAUD,CAAC,CAACC,KAAZ,GAAoB,CAApB,GAAwB,CAAC,CAAhD,CAAD,CAAT;AACD,KALD,CAFc,CAQd;AACA;;;AACAJ,IAAAA,aAAa,GAAGK,KAAhB,CAAuBC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAAjC;AACD,GAXQ,EAWN,EAXM,CAAT;AAaA,sBACE;AAAA,cACGR,MADH,aACGA,MADH,uBACGA,MAAM,CAAEW,GAAR,CAAY,CAACC,KAAD,EAAQC,KAAR,kBACX;AAAA,8BACE;AAAA,kBAAKD,KAAK,CAACE;AAAX;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,IAAD;AAAM,QAAA,EAAE,EAAG,WAAUF,KAAK,CAACG,IAAK,EAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA,OAAUF,KAAV;AAAA;AAAA;AAAA;AAAA,YADD;AADH,mBADF;AAaD;;GA7BQd,M;;KAAAA,M;AA+BT,eAAeA,MAAf","sourcesContent":["import { useEffect, useState } from 'react'\nimport { getActors, getMovieActor } from '../lib/movieService'\nimport { Link } from 'react-router-dom'\n\nfunction Actors() {\n  const [actors, setActors] = useState()\n\n  useEffect(() => {\n    // Funksjon for å hente actors data\n    const getActorsData = async () => {\n      const actors = await getActors()\n      // console.log(JSON.stringify(actors))\n      // Sorterer listen med skuespiller etter tittel på filemene\n      setActors(actors.sort((a, b) => (a.title > b.title ? 1 : -1)))\n    }\n    // Kaller på getActorsData funksjonen og tar med en .catch\n    // for å fange opp eventuelle feil\n    getActorsData().catch((error) => console.log(error))\n  }, [])\n\n  return (\n    <>\n      {actors?.map((actor, index) => (\n        <div key={index}>\n          <h2>{actor.fullname}</h2>\n          <Link to={`/actors/${actor.slug}`}>Read More</Link>\n        </div>\n      ))}\n      {/* {actors?.map((actor, index) => (\n        <ActorList key={actor.slug} slug={actor.slug} actor={actor.fullname} />\n      ))} */}\n    </>\n  )\n}\n\nexport default Actors\n"]},"metadata":{},"sourceType":"module"}