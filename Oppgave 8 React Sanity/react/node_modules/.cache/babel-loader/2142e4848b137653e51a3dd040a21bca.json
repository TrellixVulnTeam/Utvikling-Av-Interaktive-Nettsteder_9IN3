{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar isArray_1 = require(\"./util/isArray\");\n\nvar isObject_1 = require(\"./util/isObject\");\n\nvar isFunction_1 = require(\"./util/isFunction\");\n\nvar UnsubscriptionError_1 = require(\"./util/UnsubscriptionError\");\n\nvar Subscription = function () {\n  function Subscription(unsubscribe) {\n    this.closed = false;\n    this._parentOrParents = null;\n    this._subscriptions = null;\n\n    if (unsubscribe) {\n      this._ctorUnsubscribe = true;\n      this._unsubscribe = unsubscribe;\n    }\n  }\n\n  Subscription.prototype.unsubscribe = function () {\n    var errors;\n\n    if (this.closed) {\n      return;\n    }\n\n    var _a = this,\n        _parentOrParents = _a._parentOrParents,\n        _ctorUnsubscribe = _a._ctorUnsubscribe,\n        _unsubscribe = _a._unsubscribe,\n        _subscriptions = _a._subscriptions;\n\n    this.closed = true;\n    this._parentOrParents = null;\n    this._subscriptions = null;\n\n    if (_parentOrParents instanceof Subscription) {\n      _parentOrParents.remove(this);\n    } else if (_parentOrParents !== null) {\n      for (var index = 0; index < _parentOrParents.length; ++index) {\n        var parent_1 = _parentOrParents[index];\n        parent_1.remove(this);\n      }\n    }\n\n    if (isFunction_1.isFunction(_unsubscribe)) {\n      if (_ctorUnsubscribe) {\n        this._unsubscribe = undefined;\n      }\n\n      try {\n        _unsubscribe.call(this);\n      } catch (e) {\n        errors = e instanceof UnsubscriptionError_1.UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];\n      }\n    }\n\n    if (isArray_1.isArray(_subscriptions)) {\n      var index = -1;\n      var len = _subscriptions.length;\n\n      while (++index < len) {\n        var sub = _subscriptions[index];\n\n        if (isObject_1.isObject(sub)) {\n          try {\n            sub.unsubscribe();\n          } catch (e) {\n            errors = errors || [];\n\n            if (e instanceof UnsubscriptionError_1.UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(e.errors));\n            } else {\n              errors.push(e);\n            }\n          }\n        }\n      }\n    }\n\n    if (errors) {\n      throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n    }\n  };\n\n  Subscription.prototype.add = function (teardown) {\n    var subscription = teardown;\n\n    if (!teardown) {\n      return Subscription.EMPTY;\n    }\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(teardown);\n\n      case 'object':\n        if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (!(subscription instanceof Subscription)) {\n          var tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n\n        break;\n\n      default:\n        {\n          throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n    }\n\n    var _parentOrParents = subscription._parentOrParents;\n\n    if (_parentOrParents === null) {\n      subscription._parentOrParents = this;\n    } else if (_parentOrParents instanceof Subscription) {\n      if (_parentOrParents === this) {\n        return subscription;\n      }\n\n      subscription._parentOrParents = [_parentOrParents, this];\n    } else if (_parentOrParents.indexOf(this) === -1) {\n      _parentOrParents.push(this);\n    } else {\n      return subscription;\n    }\n\n    var subscriptions = this._subscriptions;\n\n    if (subscriptions === null) {\n      this._subscriptions = [subscription];\n    } else {\n      subscriptions.push(subscription);\n    }\n\n    return subscription;\n  };\n\n  Subscription.prototype.remove = function (subscription) {\n    var subscriptions = this._subscriptions;\n\n    if (subscriptions) {\n      var subscriptionIndex = subscriptions.indexOf(subscription);\n\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  };\n\n  Subscription.EMPTY = function (empty) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription());\n\n  return Subscription;\n}();\n\nexports.Subscription = Subscription;\n\nfunction flattenUnsubscriptionErrors(errors) {\n  return errors.reduce(function (errs, err) {\n    return errs.concat(err instanceof UnsubscriptionError_1.UnsubscriptionError ? err.errors : err);\n  }, []);\n}","map":{"version":3,"mappings":"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","names":["unsubscribe","_ctorUnsubscribe","_unsubscribe","Subscription","errors","closed","_parentOrParents","_subscriptions","remove","index","length","parent_1","isFunction_1","undefined","call","e","UnsubscriptionError_1","flattenUnsubscriptionErrors","isArray_1","len","sub","isObject_1","concat","push","teardown","subscription","EMPTY","tmp","Error","indexOf","subscriptions","subscriptionIndex","splice","empty","exports","reduce","errs","err"],"sources":["C:\\Users\\joaki\\Documents\\GitHub\\Utvikling-Av-Interaktive-Nettsteder\\Oppgave 8 React Sanity\\react\\node_modules\\rxjs\\src\\internal\\Subscription.ts"],"sourcesContent":["import { isArray } from './util/isArray';\r\nimport { isObject } from './util/isObject';\r\nimport { isFunction } from './util/isFunction';\r\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\r\nimport { SubscriptionLike, TeardownLogic } from './types';\r\n\r\n/**\r\n * Represents a disposable resource, such as the execution of an Observable. A\r\n * Subscription has one important method, `unsubscribe`, that takes no argument\r\n * and just disposes the resource held by the subscription.\r\n *\r\n * Additionally, subscriptions may be grouped together through the `add()`\r\n * method, which will attach a child Subscription to the current Subscription.\r\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\r\n * will be unsubscribed as well.\r\n *\r\n * @class Subscription\r\n */\r\nexport class Subscription implements SubscriptionLike {\r\n  /** @nocollapse */\r\n  public static EMPTY: Subscription = (function(empty: any) {\r\n    empty.closed = true;\r\n    return empty;\r\n  }(new Subscription()));\r\n\r\n  /**\r\n   * A flag to indicate whether this Subscription has already been unsubscribed.\r\n   * @type {boolean}\r\n   */\r\n  public closed: boolean = false;\r\n\r\n  /** @internal */\r\n  protected _parentOrParents: Subscription | Subscription[] = null;\r\n  /** @internal */\r\n  private _subscriptions: SubscriptionLike[] = null;\r\n\r\n  /**\r\n   * @param {function(): void} [unsubscribe] A function describing how to\r\n   * perform the disposal of resources when the `unsubscribe` method is called.\r\n   */\r\n  constructor(unsubscribe?: () => void) {\r\n    if (unsubscribe) {\r\n      (this as any)._ctorUnsubscribe = true;\r\n      (this as any)._unsubscribe = unsubscribe;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disposes the resources held by the subscription. May, for instance, cancel\r\n   * an ongoing Observable execution or cancel any other type of work that\r\n   * started when the Subscription was created.\r\n   * @return {void}\r\n   */\r\n  unsubscribe(): void {\r\n    let errors: any[];\r\n\r\n    if (this.closed) {\r\n      return;\r\n    }\r\n\r\n    let { _parentOrParents, _ctorUnsubscribe, _unsubscribe, _subscriptions } = (this as any);\r\n\r\n    this.closed = true;\r\n    this._parentOrParents = null;\r\n    // null out _subscriptions first so any child subscriptions that attempt\r\n    // to remove themselves from this subscription will noop\r\n    this._subscriptions = null;\r\n\r\n    if (_parentOrParents instanceof Subscription) {\r\n      _parentOrParents.remove(this);\r\n    } else if (_parentOrParents !== null) {\r\n      for (let index = 0; index < _parentOrParents.length; ++index) {\r\n        const parent = _parentOrParents[index];\r\n        parent.remove(this);\r\n      }\r\n    }\r\n\r\n    if (isFunction(_unsubscribe)) {\r\n      // It's only possible to null _unsubscribe - to release the reference to\r\n      // any teardown function passed in the constructor - if the property was\r\n      // actually assigned in the constructor, as there are some classes that\r\n      // are derived from Subscriber (which derives from Subscription) that\r\n      // implement an _unsubscribe method as a mechanism for obtaining\r\n      // unsubscription notifications and some of those subscribers are\r\n      // recycled. Also, in some of those subscribers, _unsubscribe switches\r\n      // from a prototype method to an instance property - see notifyNext in\r\n      // RetryWhenSubscriber.\r\n      if (_ctorUnsubscribe) {\r\n        (this as any)._unsubscribe = undefined;\r\n      }\r\n      try {\r\n        _unsubscribe.call(this);\r\n      } catch (e) {\r\n        errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];\r\n      }\r\n    }\r\n\r\n    if (isArray(_subscriptions)) {\r\n      let index = -1;\r\n      let len = _subscriptions.length;\r\n\r\n      while (++index < len) {\r\n        const sub = _subscriptions[index];\r\n        if (isObject(sub)) {\r\n          try {\r\n            sub.unsubscribe();\r\n          } catch (e) {\r\n            errors = errors || [];\r\n            if (e instanceof UnsubscriptionError) {\r\n              errors = errors.concat(flattenUnsubscriptionErrors(e.errors));\r\n            } else {\r\n              errors.push(e);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (errors) {\r\n      throw new UnsubscriptionError(errors);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a tear down to be called during the unsubscribe() of this\r\n   * Subscription. Can also be used to add a child subscription.\r\n   *\r\n   * If the tear down being added is a subscription that is already\r\n   * unsubscribed, is the same reference `add` is being called on, or is\r\n   * `Subscription.EMPTY`, it will not be added.\r\n   *\r\n   * If this subscription is already in an `closed` state, the passed\r\n   * tear down logic will be executed immediately.\r\n   *\r\n   * When a parent subscription is unsubscribed, any child subscriptions that were added to it are also unsubscribed.\r\n   *\r\n   * @param {TeardownLogic} teardown The additional logic to execute on\r\n   * teardown.\r\n   * @return {Subscription} Returns the Subscription used or created to be\r\n   * added to the inner subscriptions list. This Subscription can be used with\r\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\r\n   * list.\r\n   */\r\n  add(teardown: TeardownLogic): Subscription {\r\n    let subscription = (<Subscription>teardown);\r\n\r\n    if (!teardown) {\r\n      return Subscription.EMPTY;\r\n    }\r\n\r\n    switch (typeof teardown) {\r\n      case 'function':\r\n        subscription = new Subscription(<(() => void)>teardown);\r\n      case 'object':\r\n        if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {\r\n          // This also covers the case where `subscription` is `Subscription.EMPTY`, which is always in `closed` state.\r\n          return subscription;\r\n        } else if (this.closed) {\r\n          subscription.unsubscribe();\r\n          return subscription;\r\n        } else if (!(subscription instanceof Subscription)) {\r\n          const tmp = subscription;\r\n          subscription = new Subscription();\r\n          subscription._subscriptions = [tmp];\r\n        }\r\n        break;\r\n      default: {\r\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\r\n      }\r\n    }\r\n\r\n    // Add `this` as parent of `subscription` if that's not already the case.\r\n    let { _parentOrParents } = subscription;\r\n    if (_parentOrParents === null) {\r\n      // If we don't have a parent, then set `subscription._parents` to\r\n      // the `this`, which is the common case that we optimize for.\r\n      subscription._parentOrParents = this;\r\n    } else if (_parentOrParents instanceof Subscription) {\r\n      if (_parentOrParents === this) {\r\n        // The `subscription` already has `this` as a parent.\r\n        return subscription;\r\n      }\r\n      // If there's already one parent, but not multiple, allocate an\r\n      // Array to store the rest of the parent Subscriptions.\r\n      subscription._parentOrParents = [_parentOrParents, this];\r\n    } else if (_parentOrParents.indexOf(this) === -1) {\r\n      // Only add `this` to the _parentOrParents list if it's not already there.\r\n      _parentOrParents.push(this);\r\n    } else {\r\n      // The `subscription` already has `this` as a parent.\r\n      return subscription;\r\n    }\r\n\r\n    // Optimize for the common case when adding the first subscription.\r\n    const subscriptions = this._subscriptions;\r\n    if (subscriptions === null) {\r\n      this._subscriptions = [subscription];\r\n    } else {\r\n      subscriptions.push(subscription);\r\n    }\r\n\r\n    return subscription;\r\n  }\r\n\r\n  /**\r\n   * Removes a Subscription from the internal list of subscriptions that will\r\n   * unsubscribe during the unsubscribe process of this Subscription.\r\n   * @param {Subscription} subscription The subscription to remove.\r\n   * @return {void}\r\n   */\r\n  remove(subscription: Subscription): void {\r\n    const subscriptions = this._subscriptions;\r\n    if (subscriptions) {\r\n      const subscriptionIndex = subscriptions.indexOf(subscription);\r\n      if (subscriptionIndex !== -1) {\r\n        subscriptions.splice(subscriptionIndex, 1);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction flattenUnsubscriptionErrors(errors: any[]) {\r\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\r\n}\r\n"]},"metadata":{},"sourceType":"script"}