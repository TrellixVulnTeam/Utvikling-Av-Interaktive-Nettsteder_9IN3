{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Subscriber_1 = require(\"../Subscriber\");\n\nfunction filter(predicate, thisArg) {\n  return function filterOperatorFunction(source) {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nexports.filter = filter;\n\nvar FilterOperator = function () {\n  function FilterOperator(predicate, thisArg) {\n    this.predicate = predicate;\n    this.thisArg = thisArg;\n  }\n\n  FilterOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  };\n\n  return FilterOperator;\n}();\n\nvar FilterSubscriber = function (_super) {\n  __extends(FilterSubscriber, _super);\n\n  function FilterSubscriber(destination, predicate, thisArg) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.predicate = predicate;\n    _this.thisArg = thisArg;\n    _this.count = 0;\n    return _this;\n  }\n\n  FilterSubscriber.prototype._next = function (value) {\n    var result;\n\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.destination.next(value);\n    }\n  };\n\n  return FilterSubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AAwDA,SAAgBA,MAAhB,CAA0BC,SAA1B,EAC0BC,OAD1B,EACuC;AACrC,SAAO,SAASC,sBAAT,CAAgCC,MAAhC,EAAqD;AAC1D,WAAOA,MAAM,CAACC,IAAP,CAAY,IAAIC,cAAJ,CAAmBL,SAAnB,EAA8BC,OAA9B,CAAZ,CAAP;AACD,GAFD;AAGD;;AALDK;;AAOA;AACE,0BAAoBN,SAApB,EACoBC,OADpB,EACiC;AADb;AACA;AACnB;;AAEDI,4CAAKE,UAAL,EAAgCJ,MAAhC,EAA2C;AACzC,WAAOA,MAAM,CAACK,SAAP,CAAiB,IAAIC,gBAAJ,CAAqBF,UAArB,EAAiC,KAAKP,SAAtC,EAAiD,KAAKC,OAAtD,CAAjB,CAAP;AACD,GAFD;;AAGF;AAAC,CARD;;AAeA;AAAkCS;;AAIhC,4BAAYC,WAAZ,EACoBX,SADpB,EAEoBC,OAFpB,EAEgC;AAFhC,gBAGEW,kBAAMD,WAAN,KAAkB,IAHpB;;AACoBE;AACAA;AAJpBA,kBAAgB,CAAhB;;AAMC;;AAISJ,qCAAV,UAAgBK,KAAhB,EAAwB;AACtB,QAAIC,MAAJ;;AACA,QAAI;AACFA,YAAM,GAAG,KAAKf,SAAL,CAAegB,IAAf,CAAoB,KAAKf,OAAzB,EAAkCa,KAAlC,EAAyC,KAAKG,KAAL,EAAzC,CAAT;AACD,KAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,WAAKP,WAAL,CAAiBQ,KAAjB,CAAuBD,GAAvB;AACA;AACD;;AACD,QAAIH,MAAJ,EAAY;AACV,WAAKJ,WAAL,CAAiBS,IAAjB,CAAsBN,KAAtB;AACD;AACF,GAXS;;AAYZ;AAxBA,EAAkCO,uBAAlC","names":["filter","predicate","thisArg","filterOperatorFunction","source","lift","FilterOperator","exports","subscriber","subscribe","FilterSubscriber","__extends","destination","_super","_this","value","result","call","count","err","error","next","Subscriber_1"],"sources":["C:\\Users\\joaki\\Documents\\GitHub\\Utvikling-Av-Interaktive-Nettsteder\\sanity-leksjon\\frontend\\node_modules\\rxjs\\src\\internal\\operators\\filter.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Observable } from '../Observable';\r\nimport { OperatorFunction, MonoTypeOperatorFunction, TeardownLogic } from '../types';\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\r\n                                       thisArg?: any): OperatorFunction<T, S>;\r\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\r\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Filter items emitted by the source Observable by only emitting those that\r\n * satisfy a specified predicate.\r\n *\r\n * <span class=\"informal\">Like\r\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\r\n * it only emits a value from the source if it passes a criterion function.</span>\r\n *\r\n * ![](filter.png)\r\n *\r\n * Similar to the well-known `Array.prototype.filter` method, this operator\r\n * takes values from the source Observable, passes them through a `predicate`\r\n * function and only emits those values that yielded `true`.\r\n *\r\n * ## Example\r\n * Emit only click events whose target was a DIV element\r\n * ```ts\r\n * import { fromEvent } from 'rxjs';\r\n * import { filter } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const clicksOnDivs = clicks.pipe(filter(ev => ev.target.tagName === 'DIV'));\r\n * clicksOnDivs.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link distinct}\r\n * @see {@link distinctUntilChanged}\r\n * @see {@link distinctUntilKeyChanged}\r\n * @see {@link ignoreElements}\r\n * @see {@link partition}\r\n * @see {@link skip}\r\n *\r\n * @param {function(value: T, index: number): boolean} predicate A function that\r\n * evaluates each value emitted by the source Observable. If it returns `true`,\r\n * the value is emitted, if `false` the value is not passed to the output\r\n * Observable. The `index` parameter is the number `i` for the i-th source\r\n * emission that has happened since the subscription, starting from the number\r\n * `0`.\r\n * @param {any} [thisArg] An optional argument to determine the value of `this`\r\n * in the `predicate` function.\r\n * @return {Observable} An Observable of values from the source that were\r\n * allowed by the `predicate` function.\r\n * @method filter\r\n * @owner Observable\r\n */\r\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\r\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\r\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\r\n    return source.lift(new FilterOperator(predicate, thisArg));\r\n  };\r\n}\r\n\r\nclass FilterOperator<T> implements Operator<T, T> {\r\n  constructor(private predicate: (value: T, index: number) => boolean,\r\n              private thisArg?: any) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\r\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass FilterSubscriber<T> extends Subscriber<T> {\r\n\r\n  count: number = 0;\r\n\r\n  constructor(destination: Subscriber<T>,\r\n              private predicate: (value: T, index: number) => boolean,\r\n              private thisArg: any) {\r\n    super(destination);\r\n  }\r\n\r\n  // the try catch block below is left specifically for\r\n  // optimization and perf reasons. a tryCatcher is not necessary here.\r\n  protected _next(value: T) {\r\n    let result: any;\r\n    try {\r\n      result = this.predicate.call(this.thisArg, value, this.count++);\r\n    } catch (err) {\r\n      this.destination.error(err);\r\n      return;\r\n    }\r\n    if (result) {\r\n      this.destination.next(value);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}