{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nvar __objRest = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\nimport { nestLists, LIST_NEST_MODE_HTML, isPortableTextToolkitList, isPortableTextListItemBlock, isPortableTextToolkitSpan, spanToPlainText, isPortableTextBlock, isPortableTextToolkitTextNode, buildMarksTree } from \"@portabletext/toolkit\";\nexport { toPlainText } from \"@portabletext/toolkit\";\nimport React, { createContext, useMemo, useContext } from \"react\";\n\nfunction mergeComponents(parent, overrides) {\n  const _a = overrides,\n        {\n    block,\n    list,\n    listItem,\n    marks,\n    types\n  } = _a,\n        rest = __objRest(_a, [\"block\", \"list\", \"listItem\", \"marks\", \"types\"]);\n\n  return __spreadValues(__spreadProps(__spreadValues({}, parent), {\n    block: mergeDeeply(parent, overrides, \"block\"),\n    list: mergeDeeply(parent, overrides, \"list\"),\n    listItem: mergeDeeply(parent, overrides, \"listItem\"),\n    marks: mergeDeeply(parent, overrides, \"marks\"),\n    types: mergeDeeply(parent, overrides, \"types\")\n  }), rest);\n}\n\nfunction mergeDeeply(parent, overrides, key) {\n  const override = overrides[key];\n  const parentVal = parent[key];\n\n  if (typeof override === \"function\") {\n    return override;\n  }\n\n  if (override && typeof parentVal === \"function\") {\n    return override;\n  }\n\n  if (override) {\n    return __spreadValues(__spreadValues({}, parentVal), override);\n  }\n\n  return parentVal;\n}\n\nconst link = _ref => {\n  let {\n    children,\n    value\n  } = _ref;\n  return /* @__PURE__ */React.createElement(\"a\", {\n    href: value == null ? void 0 : value.href\n  }, children);\n};\n\nconst underlineStyle = {\n  textDecoration: \"underline\"\n};\nconst defaultMarks = {\n  em: _ref2 => {\n    let {\n      children\n    } = _ref2;\n    return /* @__PURE__ */React.createElement(\"em\", null, children);\n  },\n  strong: _ref3 => {\n    let {\n      children\n    } = _ref3;\n    return /* @__PURE__ */React.createElement(\"strong\", null, children);\n  },\n  code: _ref4 => {\n    let {\n      children\n    } = _ref4;\n    return /* @__PURE__ */React.createElement(\"code\", null, children);\n  },\n  underline: _ref5 => {\n    let {\n      children\n    } = _ref5;\n    return /* @__PURE__ */React.createElement(\"span\", {\n      style: underlineStyle\n    }, children);\n  },\n  \"strike-through\": _ref6 => {\n    let {\n      children\n    } = _ref6;\n    return /* @__PURE__ */React.createElement(\"del\", null, children);\n  },\n  link\n};\nconst defaultLists = {\n  number: _ref7 => {\n    let {\n      children\n    } = _ref7;\n    return /* @__PURE__ */React.createElement(\"ol\", null, children);\n  },\n  bullet: _ref8 => {\n    let {\n      children\n    } = _ref8;\n    return /* @__PURE__ */React.createElement(\"ul\", null, children);\n  }\n};\n\nconst DefaultListItem = _ref9 => {\n  let {\n    children\n  } = _ref9;\n  return /* @__PURE__ */React.createElement(\"li\", null, children);\n};\n\nconst getTemplate = (type, prop) => `Unknown ${type}, specify a component for it in the \\`components.${prop}\\` prop`;\n\nconst unknownTypeWarning = typeName => getTemplate(`block type \"${typeName}\"`, \"types\");\n\nconst unknownMarkWarning = markType => getTemplate(`mark type \"${markType}\"`, \"marks\");\n\nconst unknownBlockStyleWarning = blockStyle => getTemplate(`block style \"${blockStyle}\"`, \"block\");\n\nconst unknownListStyleWarning = listStyle => getTemplate(`list style \"${listStyle}\"`, \"list\");\n\nconst unknownListItemStyleWarning = listStyle => getTemplate(`list item style \"${listStyle}\"`, \"listItem\");\n\nfunction printWarning(message) {\n  console.warn(message);\n}\n\nconst hidden = {\n  display: \"none\"\n};\n\nconst DefaultUnknownType = _ref10 => {\n  let {\n    value,\n    isInline\n  } = _ref10;\n  const warning = unknownTypeWarning(value._type);\n  return isInline ? /* @__PURE__ */React.createElement(\"span\", {\n    style: hidden\n  }, warning) : /* @__PURE__ */React.createElement(\"div\", {\n    style: hidden\n  }, warning);\n};\n\nconst DefaultUnknownMark = _ref11 => {\n  let {\n    markType,\n    children\n  } = _ref11;\n  return /* @__PURE__ */React.createElement(\"span\", {\n    className: `unknown__pt__mark__${markType}`\n  }, children);\n};\n\nconst DefaultUnknownBlockStyle = _ref12 => {\n  let {\n    children\n  } = _ref12;\n  return /* @__PURE__ */React.createElement(\"p\", null, children);\n};\n\nconst DefaultUnknownList = _ref13 => {\n  let {\n    children\n  } = _ref13;\n  return /* @__PURE__ */React.createElement(\"ul\", null, children);\n};\n\nconst DefaultUnknownListItem = _ref14 => {\n  let {\n    children\n  } = _ref14;\n  return /* @__PURE__ */React.createElement(\"li\", null, children);\n};\n\nconst DefaultHardBreak = () => /* @__PURE__ */React.createElement(\"br\", null);\n\nconst defaultBlockStyles = {\n  normal: _ref15 => {\n    let {\n      children\n    } = _ref15;\n    return /* @__PURE__ */React.createElement(\"p\", null, children);\n  },\n  blockquote: _ref16 => {\n    let {\n      children\n    } = _ref16;\n    return /* @__PURE__ */React.createElement(\"blockquote\", null, children);\n  },\n  h1: _ref17 => {\n    let {\n      children\n    } = _ref17;\n    return /* @__PURE__ */React.createElement(\"h1\", null, children);\n  },\n  h2: _ref18 => {\n    let {\n      children\n    } = _ref18;\n    return /* @__PURE__ */React.createElement(\"h2\", null, children);\n  },\n  h3: _ref19 => {\n    let {\n      children\n    } = _ref19;\n    return /* @__PURE__ */React.createElement(\"h3\", null, children);\n  },\n  h4: _ref20 => {\n    let {\n      children\n    } = _ref20;\n    return /* @__PURE__ */React.createElement(\"h4\", null, children);\n  },\n  h5: _ref21 => {\n    let {\n      children\n    } = _ref21;\n    return /* @__PURE__ */React.createElement(\"h5\", null, children);\n  },\n  h6: _ref22 => {\n    let {\n      children\n    } = _ref22;\n    return /* @__PURE__ */React.createElement(\"h6\", null, children);\n  }\n};\nconst defaultComponents = {\n  types: {},\n  block: defaultBlockStyles,\n  marks: defaultMarks,\n  list: defaultLists,\n  listItem: DefaultListItem,\n  hardBreak: DefaultHardBreak,\n  unknownType: DefaultUnknownType,\n  unknownMark: DefaultUnknownMark,\n  unknownList: DefaultUnknownList,\n  unknownListItem: DefaultUnknownListItem,\n  unknownBlockStyle: DefaultUnknownBlockStyle\n};\nconst PortableTextComponentsContext = createContext(defaultComponents);\n\nconst PortableTextComponentsProvider = _ref23 => {\n  let {\n    components,\n    children\n  } = _ref23;\n  const value = useMemo(() => mergeComponents(defaultComponents, components), [components]);\n  return /* @__PURE__ */React.createElement(PortableTextComponentsContext.Provider, {\n    value\n  }, children);\n};\n\nfunction PortableText(_ref24) {\n  let {\n    value: input,\n    components: componentOverrides,\n    listNestingMode,\n    onMissingComponent: missingComponentHandler = printWarning\n  } = _ref24;\n  const handleMissingComponent = missingComponentHandler || noop;\n  const blocks = Array.isArray(input) ? input : [input];\n  const nested = nestLists(blocks, listNestingMode || LIST_NEST_MODE_HTML);\n  const parentComponents = useContext(PortableTextComponentsContext);\n  const components = useMemo(() => {\n    return componentOverrides ? mergeComponents(parentComponents, componentOverrides) : parentComponents;\n  }, [parentComponents, componentOverrides]);\n  const renderNode = useMemo(() => getNodeRenderer(components, handleMissingComponent), [components, handleMissingComponent]);\n  const rendered = nested.map((node, index) => renderNode({\n    node,\n    index,\n    isInline: false,\n    renderNode\n  }));\n  return componentOverrides ? /* @__PURE__ */React.createElement(PortableTextComponentsContext.Provider, {\n    value: components\n  }, rendered) : /* @__PURE__ */React.createElement(React.Fragment, null, rendered);\n}\n\nconst getNodeRenderer = (components, handleMissingComponent) => {\n  function renderNode(options) {\n    const {\n      node,\n      index,\n      isInline\n    } = options;\n    const key = node._key || `node-${index}`;\n\n    if (isPortableTextToolkitList(node)) {\n      return renderList(node, index, key);\n    }\n\n    if (isPortableTextListItemBlock(node)) {\n      return renderListItem(node, index, key);\n    }\n\n    if (isPortableTextToolkitSpan(node)) {\n      return renderSpan(node, index, key);\n    }\n\n    if (isPortableTextBlock(node)) {\n      return renderBlock(node, index, key, isInline);\n    }\n\n    if (isPortableTextToolkitTextNode(node)) {\n      return renderText(node, key);\n    }\n\n    return renderCustomBlock(node, index, key, isInline);\n  }\n\n  function renderListItem(node, index, key) {\n    const tree = serializeBlock({\n      node,\n      index,\n      isInline: false,\n      renderNode\n    });\n    const renderer = components.listItem;\n    const handler = typeof renderer === \"function\" ? renderer : renderer[node.listItem];\n    const Li = handler || components.unknownListItem;\n\n    if (Li === components.unknownListItem) {\n      const style = node.listItem || \"bullet\";\n      handleMissingComponent(unknownListItemStyleWarning(style), {\n        type: style,\n        nodeType: \"listItemStyle\"\n      });\n    }\n\n    let children = tree.children;\n\n    if (node.style && node.style !== \"normal\") {\n      const _a = node,\n            {\n        listItem\n      } = _a,\n            blockNode = __objRest(_a, [\"listItem\"]);\n\n      children = renderNode({\n        node: blockNode,\n        index,\n        isInline: false,\n        renderNode\n      });\n    }\n\n    return /* @__PURE__ */React.createElement(Li, {\n      key,\n      value: node,\n      index,\n      isInline: false,\n      renderNode\n    }, children);\n  }\n\n  function renderList(node, index, key) {\n    const children = node.children.map((child, childIndex) => renderNode({\n      node: child._key ? child : __spreadProps(__spreadValues({}, child), {\n        _key: `li-${index}-${childIndex}`\n      }),\n      index,\n      isInline: false,\n      renderNode\n    }));\n    const component = components.list;\n    const handler = typeof component === \"function\" ? component : component[node.listItem];\n    const List = handler || components.unknownList;\n\n    if (List === components.unknownList) {\n      const style = node.listItem || \"bullet\";\n      handleMissingComponent(unknownListStyleWarning(style), {\n        nodeType: \"listStyle\",\n        type: style\n      });\n    }\n\n    return /* @__PURE__ */React.createElement(List, {\n      key,\n      value: node,\n      index,\n      isInline: false,\n      renderNode\n    }, children);\n  }\n\n  function renderSpan(node, _index, key) {\n    const {\n      markDef,\n      markType,\n      markKey\n    } = node;\n    const Span = components.marks[markType] || components.unknownMark;\n    const children = node.children.map((child, childIndex) => renderNode({\n      node: child,\n      index: childIndex,\n      isInline: true,\n      renderNode\n    }));\n\n    if (Span === components.unknownMark) {\n      handleMissingComponent(unknownMarkWarning(markType), {\n        nodeType: \"mark\",\n        type: markType\n      });\n    }\n\n    return /* @__PURE__ */React.createElement(Span, {\n      key,\n      text: spanToPlainText(node),\n      value: markDef,\n      markType,\n      markKey,\n      renderNode\n    }, children);\n  }\n\n  function renderBlock(node, index, key, isInline) {\n    const _a = serializeBlock({\n      node,\n      index,\n      isInline,\n      renderNode\n    }),\n          {\n      _key\n    } = _a,\n          props = __objRest(_a, [\"_key\"]);\n\n    const style = props.node.style || \"normal\";\n    const handler = typeof components.block === \"function\" ? components.block : components.block[style];\n    const Block = handler || components.unknownBlockStyle;\n\n    if (Block === components.unknownBlockStyle) {\n      handleMissingComponent(unknownBlockStyleWarning(style), {\n        nodeType: \"blockStyle\",\n        type: style\n      });\n    }\n\n    return /* @__PURE__ */React.createElement(Block, __spreadProps(__spreadValues({\n      key\n    }, props), {\n      value: props.node,\n      renderNode\n    }));\n  }\n\n  function renderText(node, key) {\n    if (node.text === \"\\n\") {\n      const HardBreak = components.hardBreak;\n      return HardBreak ? /* @__PURE__ */React.createElement(HardBreak, {\n        key\n      }) : \"\\n\";\n    }\n\n    return node.text;\n  }\n\n  function renderCustomBlock(node, index, key, isInline) {\n    const Node = components.types[node._type];\n    const nodeOptions = {\n      value: node,\n      isInline,\n      index,\n      renderNode\n    };\n\n    if (Node) {\n      return /* @__PURE__ */React.createElement(Node, __spreadValues({\n        key\n      }, nodeOptions));\n    }\n\n    handleMissingComponent(unknownTypeWarning(node._type), {\n      nodeType: \"block\",\n      type: node._type\n    });\n    const UnknownType = components.unknownType;\n    return /* @__PURE__ */React.createElement(UnknownType, __spreadValues({\n      key\n    }, nodeOptions));\n  }\n\n  return renderNode;\n};\n\nfunction serializeBlock(options) {\n  const {\n    node,\n    index,\n    isInline,\n    renderNode\n  } = options;\n  const tree = buildMarksTree(node);\n  const children = tree.map((child, i) => renderNode({\n    node: child,\n    isInline: true,\n    index: i,\n    renderNode\n  }));\n  return {\n    _key: node._key || `block-${index}`,\n    children,\n    index,\n    isInline,\n    node\n  };\n}\n\nfunction noop() {}\n\nexport { PortableText, PortableTextComponentsProvider, defaultComponents, mergeComponents };","map":{"version":3,"mappings":"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","names":["parent","overrides","_a","block","list","listItem","marks","types","rest","__spreadValues","mergeDeeply","key","override","parentVal","link","children","value","href","underlineStyle","textDecoration","defaultMarks","em","strong","code","underline","style","defaultLists","number","bullet","DefaultListItem","getTemplate","type","prop","unknownTypeWarning","typeName","unknownMarkWarning","markType","unknownBlockStyleWarning","blockStyle","unknownListStyleWarning","listStyle","unknownListItemStyleWarning","message","warn","hidden","display","DefaultUnknownType","isInline","warning","_type","DefaultUnknownMark","className","DefaultUnknownBlockStyle","DefaultUnknownList","DefaultUnknownListItem","DefaultHardBreak","defaultBlockStyles","normal","blockquote","h1","h2","h3","h4","h5","h6","defaultComponents","hardBreak","unknownType","unknownMark","unknownList","unknownListItem","unknownBlockStyle","PortableTextComponentsContext","createContext","PortableTextComponentsProvider","components","useMemo","mergeComponents","Provider","input","componentOverrides","listNestingMode","onMissingComponent","missingComponentHandler","printWarning","handleMissingComponent","noop","blocks","Array","isArray","nested","nestLists","LIST_NEST_MODE_HTML","parentComponents","useContext","renderNode","getNodeRenderer","rendered","map","node","index","options","_key","isPortableTextToolkitList","renderList","isPortableTextListItemBlock","renderListItem","isPortableTextToolkitSpan","renderSpan","isPortableTextBlock","renderBlock","isPortableTextToolkitTextNode","renderText","renderCustomBlock","tree","serializeBlock","renderer","handler","Li","nodeType","blockNode","child","childIndex","__spreadProps","component","List","_index","markDef","markKey","Span","text","spanToPlainText","props","Block","HardBreak","Node","nodeOptions","UnknownType","buildMarksTree","i"],"sources":["C:\\Users\\joaki\\Documents\\GitHub\\Utvikling-Av-Interaktive-Nettsteder\\sanity-leksjon\\frontend\\node_modules\\@portabletext\\react\\src\\components\\merge.ts","C:\\Users\\joaki\\Documents\\GitHub\\Utvikling-Av-Interaktive-Nettsteder\\sanity-leksjon\\frontend\\node_modules\\@portabletext\\react\\src\\components\\marks.tsx","C:\\Users\\joaki\\Documents\\GitHub\\Utvikling-Av-Interaktive-Nettsteder\\sanity-leksjon\\frontend\\node_modules\\@portabletext\\react\\src\\components\\list.tsx","C:\\Users\\joaki\\Documents\\GitHub\\Utvikling-Av-Interaktive-Nettsteder\\sanity-leksjon\\frontend\\node_modules\\@portabletext\\react\\src\\warnings.ts","C:\\Users\\joaki\\Documents\\GitHub\\Utvikling-Av-Interaktive-Nettsteder\\sanity-leksjon\\frontend\\node_modules\\@portabletext\\react\\src\\components\\unknown.tsx","C:\\Users\\joaki\\Documents\\GitHub\\Utvikling-Av-Interaktive-Nettsteder\\sanity-leksjon\\frontend\\node_modules\\@portabletext\\react\\src\\components\\defaults.tsx","C:\\Users\\joaki\\Documents\\GitHub\\Utvikling-Av-Interaktive-Nettsteder\\sanity-leksjon\\frontend\\node_modules\\@portabletext\\react\\src\\context.tsx","C:\\Users\\joaki\\Documents\\GitHub\\Utvikling-Av-Interaktive-Nettsteder\\sanity-leksjon\\frontend\\node_modules\\@portabletext\\react\\src\\react-portable-text.tsx"],"sourcesContent":["import type {PortableTextReactComponents, PortableTextComponents} from '../types'\r\n\r\nexport function mergeComponents(\r\n  parent: PortableTextReactComponents,\r\n  overrides: PortableTextComponents\r\n): PortableTextReactComponents {\r\n  const {block, list, listItem, marks, types, ...rest} = overrides\r\n  // @todo figure out how to not `as ...` these\r\n  return {\r\n    ...parent,\r\n    block: mergeDeeply(parent, overrides, 'block') as PortableTextReactComponents['block'],\r\n    list: mergeDeeply(parent, overrides, 'list') as PortableTextReactComponents['list'],\r\n    listItem: mergeDeeply(parent, overrides, 'listItem') as PortableTextReactComponents['listItem'],\r\n    marks: mergeDeeply(parent, overrides, 'marks') as PortableTextReactComponents['marks'],\r\n    types: mergeDeeply(parent, overrides, 'types') as PortableTextReactComponents['types'],\r\n    ...rest,\r\n  }\r\n}\r\n\r\nfunction mergeDeeply(\r\n  parent: PortableTextReactComponents,\r\n  overrides: PortableTextComponents,\r\n  key: 'block' | 'list' | 'listItem' | 'marks' | 'types'\r\n): PortableTextReactComponents[typeof key] {\r\n  const override = overrides[key]\r\n  const parentVal = parent[key]\r\n\r\n  if (typeof override === 'function') {\r\n    return override\r\n  }\r\n\r\n  if (override && typeof parentVal === 'function') {\r\n    return override\r\n  }\r\n\r\n  if (override) {\r\n    return {...parentVal, ...override} as PortableTextReactComponents[typeof key]\r\n  }\r\n\r\n  return parentVal\r\n}\r\n","import type {TypedObject} from '@portabletext/types'\r\nimport React from 'react'\r\nimport type {PortableTextMarkComponent} from '../types'\r\n\r\ninterface DefaultLink extends TypedObject {\r\n  _type: 'link'\r\n  href: string\r\n}\r\n\r\nconst link: PortableTextMarkComponent<DefaultLink> = ({children, value}) => (\r\n  <a href={value?.href}>{children}</a>\r\n)\r\n\r\nconst underlineStyle = {textDecoration: 'underline'}\r\n\r\nexport const defaultMarks: Record<string, PortableTextMarkComponent | undefined> = {\r\n  em: ({children}) => <em>{children}</em>,\r\n  strong: ({children}) => <strong>{children}</strong>,\r\n  code: ({children}) => <code>{children}</code>,\r\n  underline: ({children}) => <span style={underlineStyle}>{children}</span>,\r\n  'strike-through': ({children}) => <del>{children}</del>,\r\n  link,\r\n}\r\n","import React from 'react'\r\nimport type {PortableTextListComponent, PortableTextListItemComponent} from '../types'\r\n\r\nexport const defaultLists: Record<'number' | 'bullet', PortableTextListComponent> = {\r\n  number: ({children}) => <ol>{children}</ol>,\r\n  bullet: ({children}) => <ul>{children}</ul>,\r\n}\r\n\r\nexport const DefaultListItem: PortableTextListItemComponent = ({children}) => <li>{children}</li>\r\n","const getTemplate = (type: string, prop: string): string =>\r\n  `Unknown ${type}, specify a component for it in the \\`components.${prop}\\` prop`\r\n\r\nexport const unknownTypeWarning = (typeName: string): string =>\r\n  getTemplate(`block type \"${typeName}\"`, 'types')\r\n\r\nexport const unknownMarkWarning = (markType: string): string =>\r\n  getTemplate(`mark type \"${markType}\"`, 'marks')\r\n\r\nexport const unknownBlockStyleWarning = (blockStyle: string): string =>\r\n  getTemplate(`block style \"${blockStyle}\"`, 'block')\r\n\r\nexport const unknownListStyleWarning = (listStyle: string): string =>\r\n  getTemplate(`list style \"${listStyle}\"`, 'list')\r\n\r\nexport const unknownListItemStyleWarning = (listStyle: string): string =>\r\n  getTemplate(`list item style \"${listStyle}\"`, 'listItem')\r\n\r\nexport function printWarning(message: string): void {\r\n  console.warn(message)\r\n}\r\n","import React from 'react'\r\nimport type {PortableTextReactComponents} from '../types'\r\nimport {unknownTypeWarning} from '../warnings'\r\n\r\nconst hidden = {display: 'none'}\r\n\r\nexport const DefaultUnknownType: PortableTextReactComponents['unknownType'] = ({\r\n  value,\r\n  isInline,\r\n}) => {\r\n  const warning = unknownTypeWarning(value._type)\r\n  return isInline ? <span style={hidden}>{warning}</span> : <div style={hidden}>{warning}</div>\r\n}\r\n\r\nexport const DefaultUnknownMark: PortableTextReactComponents['unknownMark'] = ({\r\n  markType,\r\n  children,\r\n}) => {\r\n  return <span className={`unknown__pt__mark__${markType}`}>{children}</span>\r\n}\r\n\r\nexport const DefaultUnknownBlockStyle: PortableTextReactComponents['unknownBlockStyle'] = ({\r\n  children,\r\n}) => {\r\n  return <p>{children}</p>\r\n}\r\n\r\nexport const DefaultUnknownList: PortableTextReactComponents['unknownList'] = ({children}) => {\r\n  return <ul>{children}</ul>\r\n}\r\n\r\nexport const DefaultUnknownListItem: PortableTextReactComponents['unknownListItem'] = ({\r\n  children,\r\n}) => {\r\n  return <li>{children}</li>\r\n}\r\n","import React from 'react'\r\nimport type {PortableTextBlockStyle} from '@portabletext/types'\r\nimport type {PortableTextBlockComponent, PortableTextReactComponents} from '../types'\r\nimport {defaultMarks} from './marks'\r\nimport {defaultLists, DefaultListItem} from './list'\r\nimport {\r\n  DefaultUnknownType,\r\n  DefaultUnknownMark,\r\n  DefaultUnknownList,\r\n  DefaultUnknownListItem,\r\n  DefaultUnknownBlockStyle,\r\n} from './unknown'\r\n\r\nexport const DefaultHardBreak = () => <br />\r\n\r\nexport const defaultBlockStyles: Record<\r\n  PortableTextBlockStyle,\r\n  PortableTextBlockComponent | undefined\r\n> = {\r\n  normal: ({children}) => <p>{children}</p>,\r\n  blockquote: ({children}) => <blockquote>{children}</blockquote>,\r\n  h1: ({children}) => <h1>{children}</h1>,\r\n  h2: ({children}) => <h2>{children}</h2>,\r\n  h3: ({children}) => <h3>{children}</h3>,\r\n  h4: ({children}) => <h4>{children}</h4>,\r\n  h5: ({children}) => <h5>{children}</h5>,\r\n  h6: ({children}) => <h6>{children}</h6>,\r\n}\r\n\r\nexport const defaultComponents: PortableTextReactComponents = {\r\n  types: {},\r\n\r\n  block: defaultBlockStyles,\r\n  marks: defaultMarks,\r\n  list: defaultLists,\r\n  listItem: DefaultListItem,\r\n  hardBreak: DefaultHardBreak,\r\n\r\n  unknownType: DefaultUnknownType,\r\n  unknownMark: DefaultUnknownMark,\r\n  unknownList: DefaultUnknownList,\r\n  unknownListItem: DefaultUnknownListItem,\r\n  unknownBlockStyle: DefaultUnknownBlockStyle,\r\n}\r\n","import React, {createContext, ReactNode, useMemo} from 'react'\r\nimport type {PortableTextReactComponents} from './types'\r\nimport {defaultComponents} from './components/defaults'\r\nimport {mergeComponents} from './components/merge'\r\n\r\nexport const PortableTextComponentsContext: React.Context<PortableTextReactComponents> =\r\n  createContext(defaultComponents)\r\n\r\nexport const PortableTextComponentsProvider = ({\r\n  components,\r\n  children,\r\n}: {\r\n  components: Partial<PortableTextReactComponents>\r\n  children: ReactNode\r\n}) => {\r\n  const value = useMemo(() => mergeComponents(defaultComponents, components), [components])\r\n  return (\r\n    <PortableTextComponentsContext.Provider value={value}>\r\n      {children}\r\n    </PortableTextComponentsContext.Provider>\r\n  )\r\n}\r\n","import React, {ReactNode, useContext, useMemo} from 'react'\r\nimport {\r\n  LIST_NEST_MODE_HTML,\r\n  ToolkitNestedPortableTextSpan,\r\n  ToolkitTextNode,\r\n} from '@portabletext/toolkit'\r\nimport type {\r\n  MissingComponentHandler,\r\n  NodeRenderer,\r\n  PortableTextProps,\r\n  PortableTextReactComponents,\r\n  ReactPortableTextList,\r\n  Serializable,\r\n  SerializedBlock,\r\n} from './types'\r\nimport {\r\n  isPortableTextBlock,\r\n  isPortableTextListItemBlock,\r\n  isPortableTextToolkitList,\r\n  isPortableTextToolkitSpan,\r\n  isPortableTextToolkitTextNode,\r\n  nestLists,\r\n  spanToPlainText,\r\n  buildMarksTree,\r\n} from '@portabletext/toolkit'\r\nimport type {\r\n  PortableTextBlock,\r\n  PortableTextListItemBlock,\r\n  PortableTextMarkDefinition,\r\n  PortableTextSpan,\r\n  TypedObject,\r\n} from '@portabletext/types'\r\nimport {mergeComponents} from './components/merge'\r\nimport {PortableTextComponentsContext} from './context'\r\nimport {\r\n  printWarning,\r\n  unknownBlockStyleWarning,\r\n  unknownListItemStyleWarning,\r\n  unknownListStyleWarning,\r\n  unknownMarkWarning,\r\n  unknownTypeWarning,\r\n} from './warnings'\r\n\r\nexport function PortableText<B extends TypedObject = PortableTextBlock>({\r\n  value: input,\r\n  components: componentOverrides,\r\n  listNestingMode,\r\n  onMissingComponent: missingComponentHandler = printWarning,\r\n}: PortableTextProps<B>) {\r\n  const handleMissingComponent = missingComponentHandler || noop\r\n  const blocks = Array.isArray(input) ? input : [input]\r\n  const nested = nestLists(blocks, listNestingMode || LIST_NEST_MODE_HTML)\r\n\r\n  const parentComponents = useContext(PortableTextComponentsContext)\r\n  const components = useMemo(() => {\r\n    return componentOverrides\r\n      ? mergeComponents(parentComponents, componentOverrides)\r\n      : parentComponents\r\n  }, [parentComponents, componentOverrides])\r\n\r\n  const renderNode = useMemo(\r\n    () => getNodeRenderer(components, handleMissingComponent),\r\n    [components, handleMissingComponent]\r\n  )\r\n  const rendered = nested.map((node, index) =>\r\n    renderNode({node: node, index, isInline: false, renderNode})\r\n  )\r\n\r\n  return componentOverrides ? (\r\n    <PortableTextComponentsContext.Provider value={components}>\r\n      {rendered}\r\n    </PortableTextComponentsContext.Provider>\r\n  ) : (\r\n    <>{rendered}</>\r\n  )\r\n}\r\n\r\nconst getNodeRenderer = (\r\n  components: PortableTextReactComponents,\r\n  handleMissingComponent: MissingComponentHandler\r\n): NodeRenderer => {\r\n  function renderNode<N extends TypedObject>(options: Serializable<N>): ReactNode {\r\n    const {node, index, isInline} = options\r\n    const key = node._key || `node-${index}`\r\n\r\n    if (isPortableTextToolkitList(node)) {\r\n      return renderList(node, index, key)\r\n    }\r\n\r\n    if (isPortableTextListItemBlock(node)) {\r\n      return renderListItem(node, index, key)\r\n    }\r\n\r\n    if (isPortableTextToolkitSpan(node)) {\r\n      return renderSpan(node, index, key)\r\n    }\r\n\r\n    if (isPortableTextBlock(node)) {\r\n      return renderBlock(node, index, key, isInline)\r\n    }\r\n\r\n    if (isPortableTextToolkitTextNode(node)) {\r\n      return renderText(node, key)\r\n    }\r\n\r\n    return renderCustomBlock(node, index, key, isInline)\r\n  }\r\n\r\n  /* eslint-disable react/jsx-no-bind */\r\n  function renderListItem(\r\n    node: PortableTextListItemBlock<PortableTextMarkDefinition, PortableTextSpan>,\r\n    index: number,\r\n    key: string\r\n  ) {\r\n    const tree = serializeBlock({node, index, isInline: false, renderNode})\r\n    const renderer = components.listItem\r\n    const handler = typeof renderer === 'function' ? renderer : renderer[node.listItem]\r\n    const Li = handler || components.unknownListItem\r\n\r\n    if (Li === components.unknownListItem) {\r\n      const style = node.listItem || 'bullet'\r\n      handleMissingComponent(unknownListItemStyleWarning(style), {\r\n        type: style,\r\n        nodeType: 'listItemStyle',\r\n      })\r\n    }\r\n\r\n    let children = tree.children\r\n    if (node.style && node.style !== 'normal') {\r\n      // Wrap any other style in whatever the block serializer says to use\r\n      const {listItem, ...blockNode} = node\r\n      children = renderNode({node: blockNode, index, isInline: false, renderNode})\r\n    }\r\n\r\n    return (\r\n      <Li key={key} value={node} index={index} isInline={false} renderNode={renderNode}>\r\n        {children}\r\n      </Li>\r\n    )\r\n  }\r\n\r\n  function renderList(node: ReactPortableTextList, index: number, key: string) {\r\n    const children = node.children.map((child, childIndex) =>\r\n      renderNode({\r\n        node: child._key ? child : {...child, _key: `li-${index}-${childIndex}`},\r\n        index: index,\r\n        isInline: false,\r\n        renderNode,\r\n      })\r\n    )\r\n\r\n    const component = components.list\r\n    const handler = typeof component === 'function' ? component : component[node.listItem]\r\n    const List = handler || components.unknownList\r\n\r\n    if (List === components.unknownList) {\r\n      const style = node.listItem || 'bullet'\r\n      handleMissingComponent(unknownListStyleWarning(style), {nodeType: 'listStyle', type: style})\r\n    }\r\n\r\n    return (\r\n      <List key={key} value={node} index={index} isInline={false} renderNode={renderNode}>\r\n        {children}\r\n      </List>\r\n    )\r\n  }\r\n\r\n  function renderSpan(node: ToolkitNestedPortableTextSpan, _index: number, key: string) {\r\n    const {markDef, markType, markKey} = node\r\n    const Span = components.marks[markType] || components.unknownMark\r\n    const children = node.children.map((child, childIndex) =>\r\n      renderNode({node: child, index: childIndex, isInline: true, renderNode})\r\n    )\r\n\r\n    if (Span === components.unknownMark) {\r\n      handleMissingComponent(unknownMarkWarning(markType), {nodeType: 'mark', type: markType})\r\n    }\r\n\r\n    return (\r\n      <Span\r\n        key={key}\r\n        text={spanToPlainText(node)}\r\n        value={markDef}\r\n        markType={markType}\r\n        markKey={markKey}\r\n        renderNode={renderNode}\r\n      >\r\n        {children}\r\n      </Span>\r\n    )\r\n  }\r\n\r\n  function renderBlock(node: PortableTextBlock, index: number, key: string, isInline: boolean) {\r\n    const {_key, ...props} = serializeBlock({node, index, isInline, renderNode})\r\n    const style = props.node.style || 'normal'\r\n    const handler =\r\n      typeof components.block === 'function' ? components.block : components.block[style]\r\n    const Block = handler || components.unknownBlockStyle\r\n\r\n    if (Block === components.unknownBlockStyle) {\r\n      handleMissingComponent(unknownBlockStyleWarning(style), {\r\n        nodeType: 'blockStyle',\r\n        type: style,\r\n      })\r\n    }\r\n\r\n    return <Block key={key} {...props} value={props.node} renderNode={renderNode} />\r\n  }\r\n\r\n  function renderText(node: ToolkitTextNode, key: string) {\r\n    if (node.text === '\\n') {\r\n      const HardBreak = components.hardBreak\r\n      return HardBreak ? <HardBreak key={key} /> : '\\n'\r\n    }\r\n\r\n    return node.text\r\n  }\r\n\r\n  function renderCustomBlock(node: TypedObject, index: number, key: string, isInline: boolean) {\r\n    const Node = components.types[node._type]\r\n\r\n    const nodeOptions = {\r\n      value: node,\r\n      isInline,\r\n      index,\r\n      renderNode,\r\n    }\r\n\r\n    if (Node) {\r\n      return <Node key={key} {...nodeOptions} />\r\n    }\r\n\r\n    handleMissingComponent(unknownTypeWarning(node._type), {nodeType: 'block', type: node._type})\r\n\r\n    const UnknownType = components.unknownType\r\n    return <UnknownType key={key} {...nodeOptions} />\r\n  }\r\n  /* eslint-enable react/jsx-no-bind */\r\n\r\n  return renderNode\r\n}\r\n\r\nfunction serializeBlock(options: Serializable<PortableTextBlock>): SerializedBlock {\r\n  const {node, index, isInline, renderNode} = options\r\n  const tree = buildMarksTree(node)\r\n  const children = tree.map((child, i) =>\r\n    renderNode({node: child, isInline: true, index: i, renderNode})\r\n  )\r\n\r\n  return {\r\n    _key: node._key || `block-${index}`,\r\n    children,\r\n    index,\r\n    isInline,\r\n    node,\r\n  }\r\n}\r\n\r\nfunction noop() {\r\n  // Intentional noop\r\n}\r\n"]},"metadata":{},"sourceType":"module"}