{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar isFunction_1 = require(\"./util/isFunction\");\n\nvar Observer_1 = require(\"./Observer\");\n\nvar Subscription_1 = require(\"./Subscription\");\n\nvar rxSubscriber_1 = require(\"../internal/symbol/rxSubscriber\");\n\nvar config_1 = require(\"./config\");\n\nvar hostReportError_1 = require(\"./util/hostReportError\");\n\nvar Subscriber = function (_super) {\n  __extends(Subscriber, _super);\n\n  function Subscriber(destinationOrNext, error, complete) {\n    var _this = _super.call(this) || this;\n\n    _this.syncErrorValue = null;\n    _this.syncErrorThrown = false;\n    _this.syncErrorThrowable = false;\n    _this.isStopped = false;\n\n    switch (arguments.length) {\n      case 0:\n        _this.destination = Observer_1.empty;\n        break;\n\n      case 1:\n        if (!destinationOrNext) {\n          _this.destination = Observer_1.empty;\n          break;\n        }\n\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            _this.destination = destinationOrNext;\n            destinationOrNext.add(_this);\n          } else {\n            _this.syncErrorThrowable = true;\n            _this.destination = new SafeSubscriber(_this, destinationOrNext);\n          }\n\n          break;\n        }\n\n      default:\n        _this.syncErrorThrowable = true;\n        _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);\n        break;\n    }\n\n    return _this;\n  }\n\n  Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () {\n    return this;\n  };\n\n  Subscriber.create = function (next, error, complete) {\n    var subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  };\n\n  Subscriber.prototype.next = function (value) {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  };\n\n  Subscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      this.isStopped = true;\n\n      this._error(err);\n    }\n  };\n\n  Subscriber.prototype.complete = function () {\n    if (!this.isStopped) {\n      this.isStopped = true;\n\n      this._complete();\n    }\n  };\n\n  Subscriber.prototype.unsubscribe = function () {\n    if (this.closed) {\n      return;\n    }\n\n    this.isStopped = true;\n\n    _super.prototype.unsubscribe.call(this);\n  };\n\n  Subscriber.prototype._next = function (value) {\n    this.destination.next(value);\n  };\n\n  Subscriber.prototype._error = function (err) {\n    this.destination.error(err);\n    this.unsubscribe();\n  };\n\n  Subscriber.prototype._complete = function () {\n    this.destination.complete();\n    this.unsubscribe();\n  };\n\n  Subscriber.prototype._unsubscribeAndRecycle = function () {\n    var _parentOrParents = this._parentOrParents;\n    this._parentOrParents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parentOrParents = _parentOrParents;\n    return this;\n  };\n\n  return Subscriber;\n}(Subscription_1.Subscription);\n\nexports.Subscriber = Subscriber;\n\nvar SafeSubscriber = function (_super) {\n  __extends(SafeSubscriber, _super);\n\n  function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n    var _this = _super.call(this) || this;\n\n    _this._parentSubscriber = _parentSubscriber;\n    var next;\n    var context = _this;\n\n    if (isFunction_1.isFunction(observerOrNext)) {\n      next = observerOrNext;\n    } else if (observerOrNext) {\n      next = observerOrNext.next;\n      error = observerOrNext.error;\n      complete = observerOrNext.complete;\n\n      if (observerOrNext !== Observer_1.empty) {\n        context = Object.create(observerOrNext);\n\n        if (isFunction_1.isFunction(context.unsubscribe)) {\n          _this.add(context.unsubscribe.bind(context));\n        }\n\n        context.unsubscribe = _this.unsubscribe.bind(_this);\n      }\n    }\n\n    _this._context = context;\n    _this._next = next;\n    _this._error = error;\n    _this._complete = complete;\n    return _this;\n  }\n\n  SafeSubscriber.prototype.next = function (value) {\n    if (!this.isStopped && this._next) {\n      var _parentSubscriber = this._parentSubscriber;\n\n      if (!config_1.config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  };\n\n  SafeSubscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      var _parentSubscriber = this._parentSubscriber;\n      var useDeprecatedSynchronousErrorHandling = config_1.config.useDeprecatedSynchronousErrorHandling;\n\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n\n        hostReportError_1.hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError_1.hostReportError(err);\n        }\n\n        this.unsubscribe();\n      }\n    }\n  };\n\n  SafeSubscriber.prototype.complete = function () {\n    var _this = this;\n\n    if (!this.isStopped) {\n      var _parentSubscriber = this._parentSubscriber;\n\n      if (this._complete) {\n        var wrappedComplete = function () {\n          return _this._complete.call(_this._context);\n        };\n\n        if (!config_1.config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  };\n\n  SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n\n      if (config_1.config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError_1.hostReportError(err);\n      }\n    }\n  };\n\n  SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n    if (!config_1.config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config_1.config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError_1.hostReportError(err);\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  SafeSubscriber.prototype._unsubscribe = function () {\n    var _parentSubscriber = this._parentSubscriber;\n    this._context = null;\n    this._parentSubscriber = null;\n\n    _parentSubscriber.unsubscribe();\n  };\n\n  return SafeSubscriber;\n}(Subscriber);\n\nexports.SafeSubscriber = SafeSubscriber;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AAYA;AAAmCA;;AAuCjC,sBAAYC,iBAAZ,EACYC,KADZ,EAEYC,QAFZ,EAEiC;AAFjC,gBAGEC,qBAAO,IAHT;;AAfiBC,2BAAsB,IAAtB;AACAA,4BAA2B,KAA3B;AACAA,+BAA8B,KAA9B;AAEPA,sBAAqB,KAArB;;AAgBR,YAAQC,SAAS,CAACC,MAAlB;AACE,WAAK,CAAL;AACEF,aAAI,CAACG,WAAL,GAAmBC,gBAAnB;AACA;;AACF,WAAK,CAAL;AACE,YAAI,CAACR,iBAAL,EAAwB;AACtBI,eAAI,CAACG,WAAL,GAAmBC,gBAAnB;AACA;AACD;;AACD,YAAI,OAAOR,iBAAP,KAA6B,QAAjC,EAA2C;AACzC,cAAIA,iBAAiB,YAAYS,UAAjC,EAA6C;AAC3CL,iBAAI,CAACM,kBAAL,GAA0BV,iBAAiB,CAACU,kBAA5C;AACAN,iBAAI,CAACG,WAAL,GAAmBP,iBAAnB;AACAA,6BAAiB,CAACW,GAAlB,CAAsBP,KAAtB;AACD,WAJD,MAIO;AACLA,iBAAI,CAACM,kBAAL,GAA0B,IAA1B;AACAN,iBAAI,CAACG,WAAL,GAAmB,IAAIK,cAAJ,CAAsBR,KAAtB,EAAmDJ,iBAAnD,CAAnB;AACD;;AACD;AACD;;AACH;AACEI,aAAI,CAACM,kBAAL,GAA0B,IAA1B;AACAN,aAAI,CAACG,WAAL,GAAmB,IAAIK,cAAJ,CAAsBR,KAAtB,EAAmDJ,iBAAnD,EAAsEC,KAAtE,EAA6EC,QAA7E,CAAnB;AACA;AAvBJ;;;AAyBD;;AAnEDO,uBAACI,2BAAD;AAAyB,WAAO,IAAP;AAAc,GAAvC;;AAcOJ,sBAAP,UAAiBK,IAAjB,EACiBb,KADjB,EAEiBC,QAFjB,EAEsC;AACpC,QAAMa,UAAU,GAAG,IAAIN,UAAJ,CAAeK,IAAf,EAAqBb,KAArB,EAA4BC,QAA5B,CAAnB;AACAa,cAAU,CAACL,kBAAX,GAAgC,KAAhC;AACA,WAAOK,UAAP;AACD,GANM;;AA8DPN,wCAAKO,KAAL,EAAc;AACZ,QAAI,CAAC,KAAKC,SAAV,EAAqB;AACnB,WAAKC,KAAL,CAAWF,KAAX;AACD;AACF,GAJD;;AAaAP,yCAAMU,GAAN,EAAe;AACb,QAAI,CAAC,KAAKF,SAAV,EAAqB;AACnB,WAAKA,SAAL,GAAiB,IAAjB;;AACA,WAAKG,MAAL,CAAYD,GAAZ;AACD;AACF,GALD;;AAaAV;AACE,QAAI,CAAC,KAAKQ,SAAV,EAAqB;AACnB,WAAKA,SAAL,GAAiB,IAAjB;;AACA,WAAKI,SAAL;AACD;AACF,GALD;;AAOAZ;AACE,QAAI,KAAKa,MAAT,EAAiB;AACf;AACD;;AACD,SAAKL,SAAL,GAAiB,IAAjB;;AACAd,qBAAMoB,WAAN,CAAiBC,IAAjB,CAAiB,IAAjB;AACD,GAND;;AAQUf,+BAAV,UAAgBO,KAAhB,EAAwB;AACtB,SAAKT,WAAL,CAAiBO,IAAjB,CAAsBE,KAAtB;AACD,GAFS;;AAIAP,gCAAV,UAAiBU,GAAjB,EAAyB;AACvB,SAAKZ,WAAL,CAAiBN,KAAjB,CAAuBkB,GAAvB;AACA,SAAKI,WAAL;AACD,GAHS;;AAKAd,mCAAV;AACE,SAAKF,WAAL,CAAiBL,QAAjB;AACA,SAAKqB,WAAL;AACD,GAHS;;AAMVd;AACW;AACT,SAAKgB,gBAAL,GAAwB,IAAxB;AACA,SAAKF,WAAL;AACA,SAAKD,MAAL,GAAc,KAAd;AACA,SAAKL,SAAL,GAAiB,KAAjB;AACA,SAAKQ,gBAAL,GAAwBA,gBAAxB;AACA,WAAO,IAAP;AACD,GARD;;AASF;AA/IA,EAAmCC,2BAAnC;;AAAaC;;AAsJb;AAAuC5B;;AAIrC,0BAAoB6B,iBAApB,EACYC,cADZ,EAEY5B,KAFZ,EAGYC,QAHZ,EAGiC;AAHjC,gBAIEC,qBAAO,IAJT;;AAAoBC;AAMlB,QAAIU,IAAJ;AACA,QAAIgB,OAAO,GAAQ1B,KAAnB;;AAEA,QAAI2B,wBAAWF,cAAX,CAAJ,EAAgC;AAC9Bf,UAAI,GAA2Be,cAA/B;AACD,KAFD,MAEO,IAAIA,cAAJ,EAAoB;AACzBf,UAAI,GAAyBe,cAAe,CAACf,IAA7C;AACAb,WAAK,GAAyB4B,cAAe,CAAC5B,KAA9C;AACAC,cAAQ,GAAyB2B,cAAe,CAAC3B,QAAjD;;AACA,UAAI2B,cAAc,KAAKrB,gBAAvB,EAAsC;AACpCsB,eAAO,GAAGE,MAAM,CAACC,MAAP,CAAcJ,cAAd,CAAV;;AACA,YAAIE,wBAAWD,OAAO,CAACP,WAAnB,CAAJ,EAAqC;AACnCnB,eAAI,CAACO,GAAL,CAAsBmB,OAAO,CAACP,WAAR,CAAoBW,IAApB,CAAyBJ,OAAzB,CAAtB;AACD;;AACDA,eAAO,CAACP,WAAR,GAAsBnB,KAAI,CAACmB,WAAL,CAAiBW,IAAjB,CAAsB9B,KAAtB,CAAtB;AACD;AACF;;AAEDA,SAAI,CAAC+B,QAAL,GAAgBL,OAAhB;AACA1B,SAAI,CAACc,KAAL,GAAaJ,IAAb;AACAV,SAAI,CAACgB,MAAL,GAAcnB,KAAd;AACAG,SAAI,CAACiB,SAAL,GAAiBnB,QAAjB;;AACD;;AAEDU,4CAAKI,KAAL,EAAc;AACZ,QAAI,CAAC,KAAKC,SAAN,IAAmB,KAAKC,KAA5B,EAAmC;AACzB;;AACR,UAAI,CAACkB,gBAAOC,qCAAR,IAAiD,CAACT,iBAAiB,CAAClB,kBAAxE,EAA4F;AAC1F,aAAK4B,YAAL,CAAkB,KAAKpB,KAAvB,EAA8BF,KAA9B;AACD,OAFD,MAEO,IAAI,KAAKuB,eAAL,CAAqBX,iBAArB,EAAwC,KAAKV,KAA7C,EAAoDF,KAApD,CAAJ,EAAgE;AACrE,aAAKO,WAAL;AACD;AACF;AACF,GATD;;AAWAX,6CAAMO,GAAN,EAAe;AACb,QAAI,CAAC,KAAKF,SAAV,EAAqB;AACX;AACA;;AACR,UAAI,KAAKG,MAAT,EAAiB;AACf,YAAI,CAACiB,qCAAD,IAA0C,CAACT,iBAAiB,CAAClB,kBAAjE,EAAqF;AACnF,eAAK4B,YAAL,CAAkB,KAAKlB,MAAvB,EAA+BD,GAA/B;;AACA,eAAKI,WAAL;AACD,SAHD,MAGO;AACL,eAAKgB,eAAL,CAAqBX,iBAArB,EAAwC,KAAKR,MAA7C,EAAqDD,GAArD;;AACA,eAAKI,WAAL;AACD;AACF,OARD,MAQO,IAAI,CAACK,iBAAiB,CAAClB,kBAAvB,EAA2C;AAChD,aAAKa,WAAL;;AACA,YAAIc,qCAAJ,EAA2C;AACzC,gBAAMlB,GAAN;AACD;;AACDqB,0CAAgBrB,GAAhB;AACD,OANM,MAMA;AACL,YAAIkB,qCAAJ,EAA2C;AACzCT,2BAAiB,CAACa,cAAlB,GAAmCtB,GAAnC;AACAS,2BAAiB,CAACc,eAAlB,GAAoC,IAApC;AACD,SAHD,MAGO;AACLF,4CAAgBrB,GAAhB;AACD;;AACD,aAAKI,WAAL;AACD;AACF;AACF,GA5BD;;AA8BAX;AAAA;;AACE,QAAI,CAAC,KAAKK,SAAV,EAAqB;AACX;;AACR,UAAI,KAAKI,SAAT,EAAoB;AAClB,YAAMsB,eAAe,GAAG;AAAM,sBAAI,CAACtB,SAAL,CAAeG,IAAf,CAAoBpB,KAAI,CAAC+B,QAAzB;AAAkC,SAAhE;;AAEA,YAAI,CAACC,gBAAOC,qCAAR,IAAiD,CAACT,iBAAiB,CAAClB,kBAAxE,EAA4F;AAC1F,eAAK4B,YAAL,CAAkBK,eAAlB;;AACA,eAAKpB,WAAL;AACD,SAHD,MAGO;AACL,eAAKgB,eAAL,CAAqBX,iBAArB,EAAwCe,eAAxC;;AACA,eAAKpB,WAAL;AACD;AACF,OAVD,MAUO;AACL,aAAKA,WAAL;AACD;AACF;AACF,GAjBD;;AAmBQX,0CAAR,UAAqBgC,EAArB,EAAmC5B,KAAnC,EAA8C;AAC5C,QAAI;AACF4B,QAAE,CAACpB,IAAH,CAAQ,KAAKW,QAAb,EAAuBnB,KAAvB;AACD,KAFD,CAEE,OAAOG,GAAP,EAAY;AACZ,WAAKI,WAAL;;AACA,UAAIa,gBAAOC,qCAAX,EAAkD;AAChD,cAAMlB,GAAN;AACD,OAFD,MAEO;AACLqB,0CAAgBrB,GAAhB;AACD;AACF;AACF,GAXO;;AAaAP,6CAAR,UAAwBiC,MAAxB,EAA+CD,EAA/C,EAA6D5B,KAA7D,EAAwE;AACtE,QAAI,CAACoB,gBAAOC,qCAAZ,EAAmD;AACjD,YAAM,IAAIS,KAAJ,CAAU,UAAV,CAAN;AACD;;AACD,QAAI;AACFF,QAAE,CAACpB,IAAH,CAAQ,KAAKW,QAAb,EAAuBnB,KAAvB;AACD,KAFD,CAEE,OAAOG,GAAP,EAAY;AACZ,UAAIiB,gBAAOC,qCAAX,EAAkD;AAChDQ,cAAM,CAACJ,cAAP,GAAwBtB,GAAxB;AACA0B,cAAM,CAACH,eAAP,GAAyB,IAAzB;AACA,eAAO,IAAP;AACD,OAJD,MAIO;AACLF,0CAAgBrB,GAAhB;AACA,eAAO,IAAP;AACD;AACF;;AACD,WAAO,KAAP;AACD,GAjBO;;AAoBRP;AACU;AACR,SAAKuB,QAAL,GAAgB,IAAhB;AACA,SAAKP,iBAAL,GAAyB,IAAzB;;AACAA,qBAAiB,CAACL,WAAlB;AACD,GALD;;AAMF;AArIA,EAAuCd,UAAvC;;AAAakB","names":["__extends","destinationOrNext","error","complete","_super","_this","arguments","length","destination","Observer_1","Subscriber","syncErrorThrowable","add","SafeSubscriber","rxSubscriber_1","next","subscriber","value","isStopped","_next","err","_error","_complete","closed","unsubscribe","call","_parentOrParents","Subscription_1","exports","_parentSubscriber","observerOrNext","context","isFunction_1","Object","create","bind","_context","config_1","useDeprecatedSynchronousErrorHandling","__tryOrUnsub","__tryOrSetError","hostReportError_1","syncErrorValue","syncErrorThrown","wrappedComplete","fn","parent","Error"],"sources":["C:\\Users\\joaki\\Documents\\GitHub\\Utvikling-Av-Interaktive-Nettsteder\\sanity-leksjon\\frontend\\node_modules\\rxjs\\src\\internal\\Subscriber.ts"],"sourcesContent":["import { isFunction } from './util/isFunction';\r\nimport { empty as emptyObserver } from './Observer';\r\nimport { Observer, PartialObserver, TeardownLogic } from './types';\r\nimport { Subscription } from './Subscription';\r\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\r\nimport { config } from './config';\r\nimport { hostReportError } from './util/hostReportError';\r\n\r\n/**\r\n * Implements the {@link Observer} interface and extends the\r\n * {@link Subscription} class. While the {@link Observer} is the public API for\r\n * consuming the values of an {@link Observable}, all Observers get converted to\r\n * a Subscriber, in order to provide Subscription-like capabilities such as\r\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\r\n * implementing operators, but it is rarely used as a public API.\r\n *\r\n * @class Subscriber<T>\r\n */\r\nexport class Subscriber<T> extends Subscription implements Observer<T> {\r\n\r\n  [rxSubscriberSymbol]() { return this; }\r\n\r\n  /**\r\n   * A static factory for a Subscriber, given a (potentially partial) definition\r\n   * of an Observer.\r\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\r\n   * @param {function(e: ?any): void} [error] The `error` callback of an\r\n   * Observer.\r\n   * @param {function(): void} [complete] The `complete` callback of an\r\n   * Observer.\r\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\r\n   * Observer represented by the given arguments.\r\n   * @nocollapse\r\n   */\r\n  static create<T>(next?: (x?: T) => void,\r\n                   error?: (e?: any) => void,\r\n                   complete?: () => void): Subscriber<T> {\r\n    const subscriber = new Subscriber(next, error, complete);\r\n    subscriber.syncErrorThrowable = false;\r\n    return subscriber;\r\n  }\r\n\r\n  /** @internal */ syncErrorValue: any = null;\r\n  /** @internal */ syncErrorThrown: boolean = false;\r\n  /** @internal */ syncErrorThrowable: boolean = false;\r\n\r\n  protected isStopped: boolean = false;\r\n  protected destination: PartialObserver<any> | Subscriber<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\r\n\r\n  /**\r\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\r\n   * defined Observer or a `next` callback function.\r\n   * @param {function(e: ?any): void} [error] The `error` callback of an\r\n   * Observer.\r\n   * @param {function(): void} [complete] The `complete` callback of an\r\n   * Observer.\r\n   */\r\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\r\n              error?: (e?: any) => void,\r\n              complete?: () => void) {\r\n    super();\r\n\r\n    switch (arguments.length) {\r\n      case 0:\r\n        this.destination = emptyObserver;\r\n        break;\r\n      case 1:\r\n        if (!destinationOrNext) {\r\n          this.destination = emptyObserver;\r\n          break;\r\n        }\r\n        if (typeof destinationOrNext === 'object') {\r\n          if (destinationOrNext instanceof Subscriber) {\r\n            this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\r\n            this.destination = destinationOrNext;\r\n            destinationOrNext.add(this);\r\n          } else {\r\n            this.syncErrorThrowable = true;\r\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\r\n          }\r\n          break;\r\n        }\r\n      default:\r\n        this.syncErrorThrowable = true;\r\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The {@link Observer} callback to receive notifications of type `next` from\r\n   * the Observable, with a value. The Observable may call this method 0 or more\r\n   * times.\r\n   * @param {T} [value] The `next` value.\r\n   * @return {void}\r\n   */\r\n  next(value?: T): void {\r\n    if (!this.isStopped) {\r\n      this._next(value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The {@link Observer} callback to receive notifications of type `error` from\r\n   * the Observable, with an attached `Error`. Notifies the Observer that\r\n   * the Observable has experienced an error condition.\r\n   * @param {any} [err] The `error` exception.\r\n   * @return {void}\r\n   */\r\n  error(err?: any): void {\r\n    if (!this.isStopped) {\r\n      this.isStopped = true;\r\n      this._error(err);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The {@link Observer} callback to receive a valueless notification of type\r\n   * `complete` from the Observable. Notifies the Observer that the Observable\r\n   * has finished sending push-based notifications.\r\n   * @return {void}\r\n   */\r\n  complete(): void {\r\n    if (!this.isStopped) {\r\n      this.isStopped = true;\r\n      this._complete();\r\n    }\r\n  }\r\n\r\n  unsubscribe(): void {\r\n    if (this.closed) {\r\n      return;\r\n    }\r\n    this.isStopped = true;\r\n    super.unsubscribe();\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    this.destination.next(value);\r\n  }\r\n\r\n  protected _error(err: any): void {\r\n    this.destination.error(err);\r\n    this.unsubscribe();\r\n  }\r\n\r\n  protected _complete(): void {\r\n    this.destination.complete();\r\n    this.unsubscribe();\r\n  }\r\n\r\n  /** @deprecated This is an internal implementation detail, do not use. */\r\n  _unsubscribeAndRecycle(): Subscriber<T> {\r\n    const {  _parentOrParents } = this;\r\n    this._parentOrParents = null;\r\n    this.unsubscribe();\r\n    this.closed = false;\r\n    this.isStopped = false;\r\n    this._parentOrParents = _parentOrParents;\r\n    return this;\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nexport class SafeSubscriber<T> extends Subscriber<T> {\r\n\r\n  private _context: any;\r\n\r\n  constructor(private _parentSubscriber: Subscriber<T>,\r\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\r\n              error?: (e?: any) => void,\r\n              complete?: () => void) {\r\n    super();\r\n\r\n    let next: ((value: T) => void);\r\n    let context: any = this;\r\n\r\n    if (isFunction(observerOrNext)) {\r\n      next = (<((value: T) => void)> observerOrNext);\r\n    } else if (observerOrNext) {\r\n      next = (<PartialObserver<T>> observerOrNext).next;\r\n      error = (<PartialObserver<T>> observerOrNext).error;\r\n      complete = (<PartialObserver<T>> observerOrNext).complete;\r\n      if (observerOrNext !== emptyObserver) {\r\n        context = Object.create(observerOrNext);\r\n        if (isFunction(context.unsubscribe)) {\r\n          this.add(<() => void> context.unsubscribe.bind(context));\r\n        }\r\n        context.unsubscribe = this.unsubscribe.bind(this);\r\n      }\r\n    }\r\n\r\n    this._context = context;\r\n    this._next = next;\r\n    this._error = error;\r\n    this._complete = complete;\r\n  }\r\n\r\n  next(value?: T): void {\r\n    if (!this.isStopped && this._next) {\r\n      const { _parentSubscriber } = this;\r\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\r\n        this.__tryOrUnsub(this._next, value);\r\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\r\n        this.unsubscribe();\r\n      }\r\n    }\r\n  }\r\n\r\n  error(err?: any): void {\r\n    if (!this.isStopped) {\r\n      const { _parentSubscriber } = this;\r\n      const { useDeprecatedSynchronousErrorHandling } = config;\r\n      if (this._error) {\r\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\r\n          this.__tryOrUnsub(this._error, err);\r\n          this.unsubscribe();\r\n        } else {\r\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\r\n          this.unsubscribe();\r\n        }\r\n      } else if (!_parentSubscriber.syncErrorThrowable) {\r\n        this.unsubscribe();\r\n        if (useDeprecatedSynchronousErrorHandling) {\r\n          throw err;\r\n        }\r\n        hostReportError(err);\r\n      } else {\r\n        if (useDeprecatedSynchronousErrorHandling) {\r\n          _parentSubscriber.syncErrorValue = err;\r\n          _parentSubscriber.syncErrorThrown = true;\r\n        } else {\r\n          hostReportError(err);\r\n        }\r\n        this.unsubscribe();\r\n      }\r\n    }\r\n  }\r\n\r\n  complete(): void {\r\n    if (!this.isStopped) {\r\n      const { _parentSubscriber } = this;\r\n      if (this._complete) {\r\n        const wrappedComplete = () => this._complete.call(this._context);\r\n\r\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\r\n          this.__tryOrUnsub(wrappedComplete);\r\n          this.unsubscribe();\r\n        } else {\r\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\r\n          this.unsubscribe();\r\n        }\r\n      } else {\r\n        this.unsubscribe();\r\n      }\r\n    }\r\n  }\r\n\r\n  private __tryOrUnsub(fn: Function, value?: any): void {\r\n    try {\r\n      fn.call(this._context, value);\r\n    } catch (err) {\r\n      this.unsubscribe();\r\n      if (config.useDeprecatedSynchronousErrorHandling) {\r\n        throw err;\r\n      } else {\r\n        hostReportError(err);\r\n      }\r\n    }\r\n  }\r\n\r\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\r\n    if (!config.useDeprecatedSynchronousErrorHandling) {\r\n      throw new Error('bad call');\r\n    }\r\n    try {\r\n      fn.call(this._context, value);\r\n    } catch (err) {\r\n      if (config.useDeprecatedSynchronousErrorHandling) {\r\n        parent.syncErrorValue = err;\r\n        parent.syncErrorThrown = true;\r\n        return true;\r\n      } else {\r\n        hostReportError(err);\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** @internal This is an internal implementation detail, do not use. */\r\n  _unsubscribe(): void {\r\n    const { _parentSubscriber } = this;\r\n    this._context = null;\r\n    this._parentSubscriber = null;\r\n    _parentSubscriber.unsubscribe();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}